//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Practice.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CollegeEntities : DbContext
    {
        public static CollegeEntities _context; 
        public CollegeEntities() : base("name=CollegeEntities")
        {
            
        }
        
        public static CollegeEntities GetContext()
        {
            _context = new CollegeEntities();
            return _context;
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AVGStudentScores> AVGStudentScores { get; set; }
        public virtual DbSet<Disciplines> Disciplines { get; set; }
        public virtual DbSet<Grades> Grades { get; set; }
        public virtual DbSet<Groups> Groups { get; set; }
        public virtual DbSet<LeaveStudents> LeaveStudents { get; set; }
        public virtual DbSet<RUP> RUP { get; set; }
        public virtual DbSet<Specialities> Specialities { get; set; }
        public virtual DbSet<Students> Students { get; set; }
        public virtual DbSet<Teachers> Teachers { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<DvoechinikiVRazrezeGrupIDisciplin> DvoechinikiVRazrezeGrupIDisciplin { get; set; }
        public virtual DbSet<SpisokStudentovVRazrezeGroup> SpisokStudentovVRazrezeGroup { get; set; }
        public virtual DbSet<UchebnayaNagruzka> UchebnayaNagruzka { get; set; }
        public virtual DbSet<VedomostOcenokStudentovVRazrezeGrupIDisciplin> VedomostOcenokStudentovVRazrezeGrupIDisciplin { get; set; }
    
        public virtual int AddDiscipline(string name, Nullable<int> hours)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDiscipline", nameParameter, hoursParameter);
        }
    
        public virtual int AddGroup(string name, Nullable<int> specialityID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var specialityIDParameter = specialityID.HasValue ?
                new ObjectParameter("SpecialityID", specialityID) :
                new ObjectParameter("SpecialityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGroup", nameParameter, specialityIDParameter);
        }
    
        public virtual int AddSpeciality(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSpeciality", nameParameter);
        }
    
        public virtual int AddStudent(string fIO, Nullable<int> groupID)
        {
            var fIOParameter = fIO != null ?
                new ObjectParameter("FIO", fIO) :
                new ObjectParameter("FIO", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStudent", fIOParameter, groupIDParameter);
        }
    
        public virtual int DeleteGroup(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGroup", idParameter);
        }
    
        public virtual int DeleteStudent(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudent", idParameter);
        }
    
        public virtual int UpdateDiscipline(string name, Nullable<int> hours, Nullable<int> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDiscipline", nameParameter, hoursParameter, idParameter);
        }
    
        public virtual int UpdateGroup(string name, Nullable<int> specialityID, Nullable<int> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var specialityIDParameter = specialityID.HasValue ?
                new ObjectParameter("SpecialityID", specialityID) :
                new ObjectParameter("SpecialityID", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateGroup", nameParameter, specialityIDParameter, idParameter);
        }
    
        public virtual int UpdateSpeciality(string name, Nullable<int> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSpeciality", nameParameter, idParameter);
        }
    
        public virtual int UpdateStudent(string fIO, Nullable<int> groupID, Nullable<int> id)
        {
            var fIOParameter = fIO != null ?
                new ObjectParameter("FIO", fIO) :
                new ObjectParameter("FIO", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudent", fIOParameter, groupIDParameter, idParameter);
        }
    }
}
